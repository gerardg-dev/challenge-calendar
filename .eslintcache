[{"/Users/gerardg/Desktop/challenge-calendar/calendar/src/containers/AppContainer.js":"1","/Users/gerardg/Desktop/challenge-calendar/calendar/src/components/Calendar/Days.js":"2","/Users/gerardg/Desktop/challenge-calendar/calendar/src/util/calendarHelper.js":"3","/Users/gerardg/Desktop/challenge-calendar/calendar/src/components/ReminderForm.js":"4","/Users/gerardg/Desktop/challenge-calendar/calendar/src/components/Modal.js":"5","/Users/gerardg/Desktop/challenge-calendar/calendar/src/App.js":"6","/Users/gerardg/Desktop/challenge-calendar/calendar/src/actions/index.js":"7","/Users/gerardg/Desktop/challenge-calendar/calendar/src/reducers/index.js":"8","/Users/gerardg/Desktop/challenge-calendar/calendar/src/components/Calendar/Body.js":"9","/Users/gerardg/Desktop/challenge-calendar/calendar/src/reportWebVitals.js":"10","/Users/gerardg/Desktop/challenge-calendar/calendar/src/components/Calendar/index.js":"11","/Users/gerardg/Desktop/challenge-calendar/calendar/src/components/Calendar/Header.js":"12","/Users/gerardg/Desktop/challenge-calendar/calendar/src/constants/ActionTypes.js":"13","/Users/gerardg/Desktop/challenge-calendar/calendar/src/store/configureStore.js":"14","/Users/gerardg/Desktop/challenge-calendar/calendar/src/components/Reminders.js":"15","/Users/gerardg/Desktop/challenge-calendar/calendar/src/index.js":"16","/Users/gerardg/Desktop/challenge-calendar/calendar/src/components/SingleReminder.js":"17","/Users/gerardg/Desktop/challenge-calendar/calendar/src/thunks/Weather.js":"18"},{"size":11996,"mtime":1607499696000,"results":"19","hashOfConfig":"20"},{"size":269,"mtime":1607322343000,"results":"21","hashOfConfig":"20"},{"size":454,"mtime":1607223704000,"results":"22","hashOfConfig":"20"},{"size":11943,"mtime":1607488956000,"results":"23","hashOfConfig":"20"},{"size":355,"mtime":1607436975000,"results":"24","hashOfConfig":"20"},{"size":391,"mtime":1607437670000,"results":"25","hashOfConfig":"20"},{"size":1361,"mtime":1607491135000,"results":"26","hashOfConfig":"20"},{"size":1002,"mtime":1607483001000,"results":"27","hashOfConfig":"20"},{"size":1378,"mtime":1607498300000,"results":"28","hashOfConfig":"20"},{"size":362,"mtime":1607207774000,"results":"29","hashOfConfig":"20"},{"size":1627,"mtime":1607322629000,"results":"30","hashOfConfig":"20"},{"size":489,"mtime":1607321728000,"results":"31","hashOfConfig":"20"},{"size":366,"mtime":1607476116000,"results":"32","hashOfConfig":"20"},{"size":330,"mtime":1607483483000,"results":"33","hashOfConfig":"20"},{"size":4229,"mtime":1607495235000,"results":"34","hashOfConfig":"20"},{"size":500,"mtime":1607207774000,"results":"35","hashOfConfig":"20"},{"size":2691,"mtime":1607490682000,"results":"36","hashOfConfig":"20"},{"size":1928,"mtime":1607488870000,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"ubfs2f",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/gerardg/Desktop/challenge-calendar/calendar/src/containers/AppContainer.js",["78"],"import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport moment from \"moment\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport Calendar from \"../components/Calendar/index.js\";\nimport ReminderForm from \"../components/ReminderForm\";\nimport Reminders from \"../components/Reminders\";\nimport SingleReminder from \"../components/SingleReminder\";\nimport Modal from \"../components/Modal\";\n\nimport { selectDay, createReminder, setActiveReminder } from \"../actions\";\n\nimport { getWeather } from \"../thunks/Weather\";\n\nimport { removeObjectbyKeyNameAndValue } from \"../util/arrHelpers\";\n\nimport \"../styles/main.scss\";\n\nclass AppContainer extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  state = {\n    calendarValue: moment(),\n    showModal: false,\n    showCreateReminderForm: false,\n    showReminders: false,\n    showSingleReminder: false,\n    showUpdateReminder: false\n  };\n\n  async componentDidMount() {\n    await this.props.selectDay(moment());\n  }\n\n  toggleShowModal = () => {\n    this.setState({\n      showModal: this.state.showModal === true ? false : true\n    });\n  };\n\n  toggleShowReminderForm = () => {\n    this.setState({\n      showCreateReminderForm:\n        this.state.showCreateReminderForm === true ? false : true\n    });\n  };\n\n  toggleShowReminders = () => {\n    this.setState({\n      showReminders: this.state.showReminders === true ? false : true\n    });\n  };\n\n  toggleShowSingleReminder = () => {\n    this.setState({\n      showSingleReminder: this.state.showSingleReminder === true ? false : true\n    });\n  };\n\n  toggleShowUpdateReminder = () => {\n    this.setState({\n      showUpdateReminder: this.state.showUpdateReminder === true ? false : true\n    });\n  };\n\n  hideAll = () => {\n    this.setState({\n      ...this.state,\n      ...{\n        showModal: false,\n        showCreateReminderForm: false,\n        showReminders: false,\n        showSingleReminder: false,\n        showUpdateReminder: false\n      }\n    });\n  };\n\n  getActiveReminderObj = () => {\n    if (\n      this.props.activeReminder === undefined ||\n      this.props.activeReminder === null\n    ) {\n      return null;\n    }\n\n    const { date, id } = this.props.activeReminder;\n\n    if (this.props.remindersData[date] === undefined) {\n      return null;\n    }\n\n    const dateReminders = this.props.remindersData[date];\n\n    let obj = dateReminders.find(o => o.id.toString() === id.toString());\n\n    return obj;\n  };\n\n  deleteReminder = async (date, id) => {\n    let remindersData = this.props.remindersData;\n    let allRemindersForThisDate = remindersData[date];\n\n    const dateRemindersAfterRemovedReminder = removeObjectbyKeyNameAndValue(\n      allRemindersForThisDate,\n      \"id\",\n      id\n    );\n\n    await this.props.createReminder({\n      ...remindersData,\n      ...{\n        [date]: [...dateRemindersAfterRemovedReminder]\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"home-page__container\">\n        <Calendar\n          value={this.state.calendarValue}\n          onChange={value => {\n            this.setState({ calendarValue: value });\n            this.props.selectDay(value);\n            // console.log(this.props.state);\n          }}\n          remindersData={this.props.remindersData}\n        />\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n          <div\n            className=\"btn-1-component__container\"\n            onClick={() => {\n              this.toggleShowModal();\n              this.toggleShowReminders();\n            }}\n          >\n            REMINDERS FOR {this.state.calendarValue.format(\"l\")}\n          </div>\n          <div style={{ width: \"10px\" }} />\n          <div\n            className=\"btn-1-component__container\"\n            onClick={() => {\n              this.toggleShowModal();\n              this.toggleShowReminderForm();\n            }}\n          >\n            CREATE REMINDER\n          </div>\n        </div>\n        {this.state.showModal && (\n          <Modal onClose={() => this.hideAll()}>\n            {this.state.showReminders && (\n              <Reminders\n                date={this.state.calendarValue.format(\"l\")}\n                remindersData={\n                  this.props.remindersData[this.state.calendarValue.format(\"l\")]\n                }\n                onSelectReminder={() => console.log(\"reminder chosen\")}\n                onLookupReminder={async (date, id) => {\n                  await this.props.setActiveReminder({ date, id });\n                  const activeReminderObj = await this.getActiveReminderObj();\n                  this.props.getWeather({\n                    cityName: activeReminderObj.city\n                  });\n                  this.toggleShowSingleReminder();\n                }}\n                onUpdateReminder={async (date, id) => {\n                  await this.props.setActiveReminder({ date, id });\n                  this.toggleShowUpdateReminder();\n                }}\n                onDeleteReminder={async (date, id) => {\n                  this.props.setActiveReminder({ date, id });\n                  if (\n                    window.confirm(\n                      \"ARE YOU SURE YOU WANT TO DELETE THIS REMINDER?\"\n                    )\n                  ) {\n                    this.deleteReminder(date, id);\n                  }\n                }}\n                onDeleteAllReminders={date => {\n                  if (\n                    window.confirm(\n                      \"ARE YOU SURE YOU WANT TO DELETE ALL REMINDERS FOR THIS SPECIFIC DATE?\"\n                    )\n                  ) {\n                    let remindersData = this.props.remindersData;\n\n                    const notAllowed = [date.toString()];\n                    const filtered = Object.keys(remindersData)\n                      .filter(key => !notAllowed.includes(key))\n                      .reduce((obj, key) => {\n                        return {\n                          ...obj,\n                          [key]: remindersData[key]\n                        };\n                      }, {});\n\n                    this.props.createReminder({\n                      ...filtered\n                    });\n                  }\n                }}\n              />\n            )}\n            {this.state.showCreateReminderForm && (\n              <ReminderForm\n                formTitle=\"CREATE REMINDER\"\n                day={this.props.selectedDay.get(\"date\")}\n                month={this.props.selectedDay.month() + 1}\n                year={this.props.selectedDay.year()}\n                onReturnFormData={formData => {\n                  // alert(JSON.stringify(formData, null, 4));\n\n                  const date = `${formData.month}/${formData.day}/${formData.year}`;\n\n                  const reminderObject = {\n                    ...{\n                      id: uuidv4(),\n                      date\n                    },\n                    ...formData\n                  };\n\n                  const remindersData = this.props.remindersData;\n\n                  let remindersForThisDate = {};\n\n                  if (remindersData && remindersData[date]) {\n                    // key 'date' already exists in the remindersData object\n                    // grab existing data and push new reminder object\n                    // key 'date' is an array of objects (reminderObjects)\n                    remindersForThisDate = {\n                      [date]: [...remindersData[date], ...[reminderObject]]\n                    };\n                  } else {\n                    // key 'date' does not exist in the remindersData object\n                    // create new key 'date' and add this object\n                    // key 'date' is an array of objects (reminderObjects)\n                    remindersForThisDate = {\n                      [date]: [...[reminderObject]]\n                    };\n                  }\n\n                  this.props.createReminder({\n                    ...remindersData,\n                    ...remindersForThisDate\n                  });\n\n                  this.hideAll();\n                }}\n              />\n            )}\n          </Modal>\n        )}\n        {this.state.showSingleReminder &&\n          this.props.activeReminder !== null && (\n            <SingleReminder\n              isLoadingWeather={this.props.isLoadingWeather}\n              loadingWeatherError={this.props.setWeatherError}\n              reminderObj={this.getActiveReminderObj()}\n              sevenDayForecast={this.props.activeReminderWeather}\n              onClose={() => this.toggleShowSingleReminder()}\n            />\n          )}\n        {this.state.showUpdateReminder && this.props.activeReminder !== null && (\n          <div\n            style={{\n              backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n              position: \"absolute\",\n              top: 0,\n              right: 0,\n              bottom: 0,\n              left: 0,\n              zIndex: 2000\n            }}\n          >\n            <div\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"center\",\n                alignItems: \"center\"\n              }}\n            >\n              <ReminderForm\n                formTitle=\"UPDATE REMINDER\"\n                day={this.getActiveReminderObj().day}\n                month={this.getActiveReminderObj().month}\n                year={this.getActiveReminderObj().year}\n                hour={this.getActiveReminderObj().hour}\n                minute={this.getActiveReminderObj().minute}\n                textarea={this.getActiveReminderObj().textarea}\n                city={this.getActiveReminderObj().city}\n                color={this.getActiveReminderObj().color}\n                onReturnFormData={async formData => {\n                  const activeReminderObj = await this.getActiveReminderObj();\n\n                  const date = `${formData.month}/${formData.day}/${formData.year}`;\n\n                  const reminderObject = {\n                    ...{\n                      id: activeReminderObj.id,\n                      date\n                    },\n                    ...formData\n                  };\n\n                  const remindersData = this.props.remindersData;\n\n                  let remindersForThisDate = {};\n\n                  if (remindersData && remindersData[date]) {\n                    // key 'date' already exists in the remindersData object\n                    // grab existing data and push new reminder object\n                    // key 'date' is an array of objects (reminderObjects)\n                    remindersForThisDate = {\n                      [date]: [...remindersData[date], ...[reminderObject]]\n                    };\n                  } else {\n                    // key 'date' does not exist in the remindersData object\n                    // create new key 'date' and add this object\n                    // key 'date' is an array of objects (reminderObjects)\n                    remindersForThisDate = {\n                      [date]: [...[reminderObject]]\n                    };\n                  }\n\n                  this.props.createReminder({\n                    ...remindersData,\n                    ...remindersForThisDate\n                  });\n\n                  this.hideAll();\n\n                  this.deleteReminder(\n                    activeReminderObj.date,\n                    activeReminderObj.id\n                  );\n                }}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const {\n    selectedDay,\n    remindersData,\n    activeReminder,\n    activeReminderWeather,\n    setWeatherError,\n    isLoadingWeather\n  } = state;\n  return {\n    selectedDay,\n    remindersData,\n    activeReminder,\n    activeReminderWeather,\n    setWeatherError,\n    isLoadingWeather,\n    state\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  {\n    selectDay,\n    createReminder,\n    setActiveReminder,\n    //\n    getWeather\n  }\n)(AppContainer);\n","/Users/gerardg/Desktop/challenge-calendar/calendar/src/components/Calendar/Days.js",[],["79","80"],"/Users/gerardg/Desktop/challenge-calendar/calendar/src/util/calendarHelper.js",[],"/Users/gerardg/Desktop/challenge-calendar/calendar/src/components/ReminderForm.js",["81"],"/Users/gerardg/Desktop/challenge-calendar/calendar/src/components/Modal.js",[],"/Users/gerardg/Desktop/challenge-calendar/calendar/src/App.js",[],"/Users/gerardg/Desktop/challenge-calendar/calendar/src/actions/index.js",[],"/Users/gerardg/Desktop/challenge-calendar/calendar/src/reducers/index.js",[],"/Users/gerardg/Desktop/challenge-calendar/calendar/src/components/Calendar/Body.js",[],"/Users/gerardg/Desktop/challenge-calendar/calendar/src/reportWebVitals.js",[],["82","83"],"/Users/gerardg/Desktop/challenge-calendar/calendar/src/components/Calendar/index.js",[],["84","85"],"/Users/gerardg/Desktop/challenge-calendar/calendar/src/components/Calendar/Header.js",[],"/Users/gerardg/Desktop/challenge-calendar/calendar/src/constants/ActionTypes.js",[],"/Users/gerardg/Desktop/challenge-calendar/calendar/src/store/configureStore.js",[],"/Users/gerardg/Desktop/challenge-calendar/calendar/src/components/Reminders.js",["86","87"],"/Users/gerardg/Desktop/challenge-calendar/calendar/src/index.js",[],"/Users/gerardg/Desktop/challenge-calendar/calendar/src/components/SingleReminder.js",[],"/Users/gerardg/Desktop/challenge-calendar/calendar/src/thunks/Weather.js",[],{"ruleId":"88","severity":1,"message":"89","line":22,"column":3,"nodeType":"90","messageId":"91","endLine":24,"endColumn":4},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":30,"column":11,"nodeType":"98","messageId":"99","endLine":30,"endColumn":20},{"ruleId":"92","replacedBy":"100"},{"ruleId":"94","replacedBy":"101"},{"ruleId":"92","replacedBy":"102"},{"ruleId":"94","replacedBy":"103"},{"ruleId":"96","severity":1,"message":"104","line":1,"column":17,"nodeType":"98","messageId":"99","endLine":1,"endColumn":25},{"ruleId":"105","severity":1,"message":"106","line":51,"column":46,"nodeType":"107","messageId":"108","endLine":51,"endColumn":48},"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'inputName' is assigned a value but never used.","Identifier","unusedVar",["109"],["110"],["109"],["110"],"'useState' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]